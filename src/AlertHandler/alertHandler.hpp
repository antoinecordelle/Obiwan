#ifndef ALERTHANDLER_HPP
#define ALERTHANDLER_HPP

#include <queue>
#include "../Parser/parser.hpp"

/// Structure defining the alerts generated by the AlertHandler and send to the Dashboard
struct Alert {
    time_t  triggerTime;
    /// Number of hits during the timeWindow of the AlertHandler
    int     hitCount;
    /// True if this is an alert being triggered, False if this is a recovery
    bool    isPositive;

    Alert(time_t time, int count, bool positive);
};

/// Class managing the alerting system
/**
 * @brief It will be sent packets from the application, will add the packet to its queue and determine if an alert should be sent
 * and will trigger one if so.
 */
class AlertHandler {
public:
    AlertHandler(int timeWindow, int threshold);

    /// Initializes the AlertHandler with the first packet.
    void    initialize(const HttpPacket &httpPacket);

    /// Processes the last line received
    /**
     * @brief Adds the packet to the queue. If we switch to a new second, remove packets older than the time window
     * and determines if an alert should be triggered (positive alert or recovery depending on the state isAlertTriggered)
     */
    bool    processLine(const HttpPacket &httpPacket);

    /// Computes an alert and sends it back. Called only if processLine returned true
    Alert   getAlert(const HttpPacket &httpPacket);

private:
    void    addPacket(const HttpPacket &httpPacket);
    void    removeOldPackets(const HttpPacket &httpPacket);

private:
    /// Packets queue : it has all packets younger than the time window
    std::queue<HttpPacket>   mPacketQueue;
    /// Current number of packets in the queue. Incremented by addPacket et decremented by removeOldPackets
    int                      mCurrentCount;
    /// Current newerPing received, to trigger the change of second to remove older packets
    time_t                   mCurrentTime;
    /// Current state of the alerts : positive if an alert is currently live
    bool                     isAlertTriggered;
    int                      mTimeWindow;
    int                      mThreshold;
};

#endif //ALERTHANDLER_HPP
